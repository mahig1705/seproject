"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/services/api.ts":
/*!*****************************!*\
  !*** ./src/services/api.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: function() { return /* binding */ apiService; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-cookie */ \"(app-pages-browser)/./node_modules/js-cookie/dist/js.cookie.mjs\");\n\n\nclass ApiService {\n    // ---------------- Auth ----------------\n    login(email, password) {\n        return this.api.post(\"/auth/login\", {\n            email,\n            password\n        }).then((res)=>res.data);\n    }\n    register(userData) {\n        return this.api.post(\"/auth/register\", userData).then((res)=>res.data);\n    }\n    logout() {\n        const refreshToken = js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"refreshToken\");\n        if (refreshToken) this.api.post(\"/auth/logout\", {\n            refreshToken\n        });\n        js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(\"accessToken\");\n        js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(\"refreshToken\");\n        return Promise.resolve();\n    }\n    // ---------------- Users ----------------\n    createUser(data) {\n        return this.api.post(\"/users\", data).then((res)=>res.data);\n    }\n    getUsers() {\n        return this.api.get(\"/users\").then((res)=>res.data);\n    }\n    getUserById(id) {\n        return this.api.get(\"/users/\".concat(id)).then((res)=>res.data);\n    }\n    updateUser(id, data) {\n        return this.api.put(\"/users/\".concat(id), data).then((res)=>res.data);\n    }\n    deleteUser(id) {\n        return this.api.delete(\"/users/\".concat(id)).then((res)=>res.data);\n    }\n    // ---------------- Issues ----------------\n    getIssues(params) {\n        return this.api.get(\"/issues\", {\n            params\n        }).then((res)=>res.data.data); // unwrap the 'data' key\n    }\n    getIssueById(id) {\n        return this.api.get(\"/issues/\".concat(id)).then((res)=>res.data.data); // unwrap\n    }\n    // Allow technician field here\n    createIssue(data) {\n        return this.api.post(\"/issues\", data).then((res)=>res.data.data); // unwrap\n    }\n    // Make updateIssue partial and include technician\n    updateIssue(id, data) {\n        return this.api.patch(\"/issues/\".concat(id), data).then((res)=>res.data.data);\n    }\n    deleteIssue(id) {\n        return this.api.delete(\"/issues/\".concat(id)).then((res)=>res.data); // unwrap\n    }\n    // ---------------- Notices ----------------\n    getNotices(params) {\n        return this.api.get(\"/notices\", {\n            params\n        }).then((res)=>res.data);\n    }\n    getNoticeById(id) {\n        return this.api.get(\"/notices/\".concat(id)).then((res)=>res.data);\n    }\n    createNotice(data) {\n        return this.api.post(\"/notices\", data).then((res)=>res.data);\n    }\n    updateNotice(id, data) {\n        return this.api.patch(\"/notices/\".concat(id), data).then((res)=>res.data);\n    }\n    deleteNotice(id) {\n        return this.api.delete(\"/notices/\".concat(id)).then((res)=>res.data);\n    }\n    // ---------------- Bills ----------------\n    // ---------------- Bills ----------------\n    getBills(params) {\n        return this.api.get(\"/bills\", {\n            params\n        }).then((res)=>res.data.data); // ✅ Now consistent with backend\n    }\n    getBillById(id) {\n        return this.api.get(\"/bills/\".concat(id)).then((res)=>res.data.data); // ✅ Unwrap\n    }\n    createBill(data) {\n        return this.api.post(\"/bills\", data).then((res)=>res.data);\n    }\n    updateBill(id, data) {\n        return this.api.put(\"/bills/\".concat(id), data).then((res)=>res.data);\n    }\n    deleteBill(id) {\n        return this.api.delete(\"/bills/\".concat(id)).then((res)=>res.data);\n    }\n    payBill(billId, amount, gatewayRef) {\n        return this.api.patch(\"/bills/\".concat(billId, \"/pay\"), {\n            amount,\n            gatewayRef\n        }).then((res)=>res.data);\n    }\n    generateBills(data) {\n        return this.api.post(\"/bills/generate\", data).then((res)=>res.data);\n    }\n    // ---------------- Payments ----------------\n    async getPayments(params) {\n        try {\n            const response = await this.api.get(\"/payments\", {\n                params\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to fetch payments:\", error);\n            throw error;\n        }\n    }\n    // ---------------- Amenities ----------------\n    getAmenities() {\n        return this.api.get(\"/amenities\").then((res)=>res.data);\n    }\n    createAmenity(data) {\n        return this.api.post(\"/amenities\", data).then((res)=>res.data);\n    }\n    updateAmenity(id, data) {\n        return this.api.put(\"/amenities/\".concat(id), data).then((res)=>res.data);\n    }\n    deleteAmenity(id) {\n        return this.api.delete(\"/amenities/\".concat(id)).then((res)=>res.data);\n    }\n    // ---------------- Bookings ----------------\n    getBookings(params) {\n        return this.api.get(\"/bookings\", {\n            params\n        }).then((res)=>res.data.data); // ✅ unwrap here\n    }\n    createBooking(data) {\n        return this.api.post(\"/bookings\", data).then((res)=>res.data); // single object ✅\n    }\n    updateBooking(id, data) {\n        return this.api.put(\"/bookings/\".concat(id), data).then((res)=>res.data);\n    }\n    approveBooking(id, status) {\n        return this.api.patch(\"/bookings/\".concat(id, \"/approve\"), {\n            status\n        }).then((res)=>res.data);\n    }\n    updateBookingStatus(id, status) {\n        return this.api.patch(\"/bookings/\".concat(id, \"/\"), {\n            status\n        }).then((res)=>res.data);\n    }\n    // ---------------- Visitors ----------------\n    getVisitors(params) {\n        return this.api.get(\"/visitors\", {\n            params\n        }).then((res)=>res.data.data); // ✅ Now unwraps consistently\n    }\n    createVisitor(data) {\n        return this.api.post(\"/visitors\", data).then((res)=>res.data.data); // ✅ Unwrap\n    }\n    checkoutVisitor(id) {\n        return this.api.patch(\"/visitors/\".concat(id, \"/checkout\")).then((res)=>res.data.data); // ✅ Unwrap\n    }\n    // ---------------- Technicians ----------------\n    getTechnicians() {\n        return this.api.get(\"/technicians\").then((res)=>res.data.data); // works correctly\n    }\n    createTechnician(data) {\n        return this.api.post(\"/technicians\", data).then((res)=>res.data.data);\n    }\n    updateTechnician(id, data) {\n        return this.api.put(\"/technicians/\".concat(id), data).then((res)=>res.data);\n    }\n    deleteTechnician(id) {\n        // Returns message\n        return this.api.delete(\"/technicians/\".concat(id)).then((res)=>res.data); // just take the whole object since backend returns { message: ... }\n    }\n    constructor(){\n        this.api = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n            baseURL: \"http://localhost:5000/api\" || 0,\n            timeout: 10000\n        });\n        // Attach auth token to all requests\n        this.api.interceptors.request.use((config)=>{\n            const token = js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"accessToken\");\n            if (token) config.headers.Authorization = \"Bearer \".concat(token);\n            return config;\n        });\n        // Handle 401 and token refresh\n        this.api.interceptors.response.use((res)=>res, async (error)=>{\n            var _error_response;\n            const originalRequest = error.config;\n            if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 401 && !originalRequest._retry) {\n                originalRequest._retry = true;\n                try {\n                    const refreshToken = js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"refreshToken\");\n                    if (!refreshToken) throw new Error(\"No refresh token found\");\n                    const resp = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(\"\".concat(this.api.defaults.baseURL, \"/auth/refresh\"), {\n                        refreshToken\n                    });\n                    const { accessToken } = resp.data.data;\n                    js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set(\"accessToken\", accessToken, {\n                        expires: 7\n                    });\n                    originalRequest.headers.Authorization = \"Bearer \".concat(accessToken);\n                    return this.api(originalRequest);\n                } catch (e) {\n                    js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(\"accessToken\");\n                    js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(\"refreshToken\");\n                    window.location.href = \"/login\";\n                }\n            }\n            return Promise.reject(error);\n        });\n    }\n}\nconst apiService = new ApiService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/api.ts\n"));

/***/ })

});